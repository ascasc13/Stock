<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        table {
            margin: 0 auto;
            width: 80%;
            border-collapse: collapse;
        }
        table, th, td {
            border: 1px solid black;
        }
        th, td {
            text-align: center;
            padding: 10px;
        }
        .search-sort-container {
            text-align: center;
            margin-bottom: 20px;
        }
        .search-sort-container input, .search-sort-container select {
            margin: 0 10px;
            padding: 10px;
        }
        .popup {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 10px;
            background-color: #28a745;
            color: white;
            border-radius: 5px;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        .popup.error {
            background-color: #dc3545;
        }
        .popup.show {
            opacity: 1;
        }
        #scanner-container {
            display: none;
            width: 100%;
            max-width: 600px;
            margin: 0 auto;
            text-align: center;
        }
        #scanner-container video {
            width: 100%;
            border: 1px solid black;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
</head>
<body>
<%- include('partials/header') %>
<main>
    <h1><%= title %></h1>
    <div class="search-sort-container">
        <input type="text" id="search" placeholder="Rechercher par nom...">
        <select id="statut-filter">
            <option value="">Tous les statuts</option>
            <% statuses.forEach(status => { %>
                <option value="<%= status.nom %>"><%= status.nom %></option>
            <% }) %>
        </select>
        <select id="sort">
            <option value="nom">Nom</option>
            <option value="marque">Marque</option>
            <option value="modele">Modèle</option>
            <option value="code_barre">Code Barre</option>
        </select>
    </div>
    <table>
        <thead>
        <tr>
            <th></th>
            <th>Nom</th>
            <th>Marque</th>
            <th>Modèle</th>
            <th>Status</th>
            <th>Code-barre</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody id="equipements-tbody">
        <% equipements.forEach(equipement => { %>
            <tr>
                <td><input type="checkbox" name="selectEquipement" value="<%= equipement.id %>"></td>
                <td><%= equipement.nom %></td>
                <td><%= marques.find(marque => marque.id === equipement.marque_id).nom %></td>
                <td><%= equipement.modele %></td>
                <td><%= statuses.find(status => status.id === equipement.status_id).nom %></td>
                <td><%= equipement.Code_barre %></td>
                <td>
                    <button onclick="afficherFormulaireModifier(<%= equipement.id %>)">Modifier</button>
                    <button onclick="supprimerEquipement(<%= equipement.id %>)">Supprimer</button>
                </td>
            </tr>
        <% }) %>
        </tbody>
    </table>
    <br>
    <div id="formModifierEquipement" class="popup<%= modifierVisible ? ' show' : '' %>">
        <h2>Modifier l'équipement</h2>
        <form id="formModifier" method="POST">
            <div class="form-group">
                <label for="nom">Nom :</label>
                <input type="text" id="nom" name="nom" required>
            </div>
            <div class="form-group">
                <label for="marque">Marque :</label>
                <select id="marque" name="marque_id">
                    <% marques.forEach(marque => { %>
                        <option value="<%= marque.id %>"><%= marque.nom %></option>
                    <% }) %>
                </select>
            </div>
            <div class="form-group">
                <label for="status">Status :</label>
                <select id="status" name="status_id">
                    <% statuses.forEach(status => { %>
                        <option value="<%= status.id %>"><%= status.nom %></option>
                    <% }) %>
                </select>
            </div>
            <div class="form-group">
                <label for="code_barre">Code-barre :</label>
                <input type="text" id="code_barre" name="code_barre" required>
            </div>
            <div class="form-group">
                <button type="submit">Enregistrer</button>
            </div>
        </form>
        <button id="start-scanner">Scanner un code-barres</button>
        <div id="scanner-container" style="width: 100%; height: 50vh;"></div>
        <button onclick="cacherFormulaireModifier()">Annuler</button>
    </div>
</main>
<%- include('partials/footer') %>
</body>
</html>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const searchInput = document.getElementById('search');
        const statusFilter = document.getElementById('statut-filter');
        const sortSelect = document.getElementById('sort');
        const formModifier = document.getElementById('formModifier');
        const formModifierEquipement = document.getElementById('formModifierEquipement');
        const tbody = document.getElementById('equipements-tbody');

        searchInput.addEventListener('input', filterEquipments);
        statusFilter.addEventListener('change', filterEquipments);
        sortSelect.addEventListener('change', sortEquipments);
        formModifier.addEventListener('submit', handleFormSubmit);

        const startScannerButton = document.getElementById('start-scanner');
        const scannerContainer = document.getElementById('scanner-container');

        startScannerButton.addEventListener('click', () => {
            Quagga.init({
                inputStream: {
                    name: "Live",
                    type: "LiveStream",
                    target: scannerContainer,
                    constraints: {
                        width: 640,
                        height: 480,
                        facingMode: "environment" // ou "user" pour la caméra frontale
                    },
                },
                decoder: {
                    readers: ["code_128_reader"] // vous pouvez ajouter d'autres lecteurs ici
                }
            }, (err) => {
                if (err) {
                    console.error(err);
                    return;
                }
                Quagga.start();
            });

            Quagga.onDetected((data) => {
                const barcode = data.codeResult.code;
                document.getElementById('code_barre').value = barcode;
                Quagga.stop();
                alert(`Code-barres scanné: ${barcode}`);
            });
        });

        // Fonction pour afficher le formulaire de modification avec les informations scannées
        async function afficherFormulaireModifier(id) {
            try {
                const response = await fetch(`/equipements/${id}`);
                const data = await response.json();

                document.getElementById('nom').value = data.nom;
                document.getElementById('marque').value = data.marque_id;
                document.getElementById('status').value = data.status_id;
                document.getElementById('code_barre').value = data.code_barre;

                document.getElementById('formModifierEquipement').classList.add('show');
                document.getElementById('formModifier').setAttribute('data-id', id);
            } catch (error) {
                console.error('Erreur lors de la récupération des données de l\'équipement:', error);
            }
        }

        function filterEquipments() {
            const searchValue = searchInput.value.toLowerCase();
            const statusValue = statusFilter.value;
            const rows = tbody.querySelectorAll('tr');

            rows.forEach(row => {
                const name = row.cells[1].textContent.toLowerCase();
                const status = row.cells[4].textContent;

                const matchesSearch = name.includes(searchValue);
                const matchesStatus = !statusValue || status === statusValue;

                row.style.display = matchesSearch && matchesStatus ? '' : 'none';
            });
        }

        function sortEquipments() {
            const sortCriteria = sortSelect.value;
            const rows = Array.from(tbody.getElementsByTagName('tr'));

            rows.sort((a, b) => {
                const cellA = a.querySelector(`td:nth-child(${getSortIndex(sortCriteria)})`).textContent.toLowerCase();
                const cellB = b.querySelector(`td:nth-child(${getSortIndex(sortCriteria)})`).textContent.toLowerCase();

                return cellA.localeCompare(cellB);
            });

            rows.forEach(row => tbody.appendChild(row));
        }

        function getSortIndex(criteria) {
            switch (criteria) {
                case 'nom': return 2;
                case 'marque': return 3;
                case 'modele': return 4;
                case 'code_barre': return 6;
                default: return 2;
            }
        }

        async function afficherFormulaireModifier(id) {
            try {
                const response = await fetch(`/equipements/${id}`);
                const data = await response.json();

                document.getElementById('nom').value = data.nom;
                document.getElementById('marque').value = data.marque_id;
                document.getElementById('status').value = data.status_id;
                document.getElementById('code_barre').value = data.code_barre;

                formModifierEquipement.classList.add('show');
                formModifier.setAttribute('data-id', id);
            } catch (error) {
                console.error('Erreur lors de la récupération des données de l\'équipement:', error);
            }
        }

        function cacherFormulaireModifier() {
            formModifierEquipement.classList.remove('show');
        }

        async function supprimerEquipement(id) {
            try {
                const response = await fetch(`/equipements/${id}`, {
                    method: 'DELETE',
                });

                if (response.ok) {
                    location.reload();
                } else {
                    console.error('Erreur lors de la suppression de l\'équipement:', response.statusText);
                }
            } catch (error) {
                console.error('Erreur lors de la suppression de l\'équipement:', error);
            }
        }

        async function handleFormSubmit(event) {
            event.preventDefault();
            const id = formModifier.getAttribute('data-id');
            const formData = new FormData(formModifier);

            try {
                const response = await fetch(`/equipements/${id}`, {
                    method: 'PUT',
                    body: formData,
                });

                if (response.ok) {
                    cacherFormulaireModifier();
                    location.reload();
                } else {
                    console.error('Erreur lors de la mise à jour de l\'équipement:', response.statusText);
                }
            } catch (error) {
                console.error('Erreur lors de la mise à jour de l\'équipement:', error);
            }
        }

        window.afficherFormulaireModifier = afficherFormulaireModifier;
        window.cacherFormulaireModifier = cacherFormulaireModifier;
        window.supprimerEquipement = supprimerEquipement;
    });
</script>

